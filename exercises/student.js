if (sessionStorage.getItem("authenticated") !== "true") {
  alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. ƒêang chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p...");
  window.location.href = "student-login.html";
}
function normalize(str) {
  return str.trim().toLowerCase();
}

const SHEET_STUDENT_LIST = "https://docs.google.com/spreadsheets/d/1XmiM7fIGqo3eq8QMuhvxj4G3LrGBzsbQHs_gk0KXdTc/gviz/tq?tqx=out:json";

import {
  initializeApp
} from "https://www.gstatic.com/firebasejs/10.5.0/firebase-app.js";

import {
  getFirestore,
  collection,
  doc,
  getDoc,
  getDocs,
  setDoc,
  deleteDoc,
  query,
  where
} from "https://www.gstatic.com/firebasejs/10.5.0/firebase-firestore.js";


const firebaseConfig = {
  apiKey: "AIzaSyBQ1pPmSdBV8M8YdVbpKhw_DOetmzIMwXU",
  authDomain: "lop-hoc-thay-tinh.firebaseapp.com",
  projectId: "lop-hoc-thay-tinh",
  storageBucket: "lop-hoc-thay-tinh.appspot.com",
  messagingSenderId: "391812475288",
  appId: "1:391812475288:web:ca4c275ac776d69deb23ed"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

function renderDateCheckboxes(dateList) {
  const container = document.getElementById("dateCheckboxList");
  container.innerHTML = "<strong>Ch·ªçn ng√†y:</strong><br/>";

  dateList.forEach(code => {
    const label = `${code.slice(0,2)}-${code.slice(2,4)}-${code.slice(4)}`;
    const checkbox = document.createElement("label");
    checkbox.style.display = "block";
    checkbox.innerHTML = `
      <input type="checkbox" value="${code}" class="date-checkbox" />
      ${label}
    `;
    container.appendChild(checkbox);
  });
}
function getSelectedDates() {
  return Array.from(document.querySelectorAll(".date-checkbox:checked"))
    .map(cb => cb.value);
}
function isOlderThan8Days(dateCode) {
  const day = parseInt(dateCode.slice(0, 2), 10);
  const month = parseInt(dateCode.slice(2, 4), 10) - 1;
  const year = 2000 + parseInt(dateCode.slice(4, 6), 10);
  const entryDate = new Date(year, month, day);

  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - 8);

  return entryDate < cutoffDate;
}

async function cleanOldEntries() {
  console.log("üßπ B·∫Øt ƒë·∫ßu xo√° d·ªØ li·ªáu c≈©...");

  // 1. Xo√° h·ªçc sinh c≈© trong collection "hocsinh"
  const snapshot = await getDocs(collection(db, "hocsinh"));
  let totalRead = 0;
  let totalDeleted = 0;
  const deletedDates = new Set();

  for (const docSnap of snapshot.docs) {
    totalRead++;
    const data = docSnap.data();
    const id = docSnap.id;
    const dateCode = data.date;

    if (!dateCode || !/^\d{6}$/.test(dateCode)) continue;

    if (isOlderThan8Days(dateCode)) {
      await deleteDoc(doc(db, "hocsinh", id));
      totalDeleted++;
      deletedDates.add(dateCode);
    }
  }

  console.log("üìä ƒê√£ xo√°", totalDeleted, "h·ªçc sinh c≈©");

  // 2. Xo√° d·ªØ li·ªáu ng√†y c≈© trong summary-<l·ªõp>-recent
  // 2. Xo√° d·ªØ li·ªáu ng√†y c≈© trong summary-<l·ªõp>-recent
  const classes = ["2", "3", "4", "5", "6"];
  for (const className of classes) {
    const ref = doc(db, "tonghop", `summary-${className}-recent`);
    const snap = await getDoc(ref);
    if (!snap.exists()) continue;

    const data = snap.data();
    const newDayData = {};
    const newDays = [];

    for (const dateCode of data.days || []) {
      if (!isOlderThan8Days(dateCode)) {
        newDayData[dateCode] = data.dayData[dateCode];
        newDays.push(dateCode);
      } else {
        console.log(`üóëÔ∏è Xo√° ng√†y ${dateCode} kh·ªèi summary-${className}-recent`);
      }
    }

    data.dayData = newDayData;
    data.days = newDays;

    await setDoc(ref, data);
  }


  // 3. Xo√° h·∫≥n c√°c document summary-<l·ªõp>-<dateCode> c≈©
  for (const className of classes) {
    const tonghopRef = collection(db, "tonghop");
    const tonghopSnap = await getDocs(tonghopRef);

    for (const docSnap of tonghopSnap.docs) {
      const id = docSnap.id;
      // Ki·ªÉm tra d·∫°ng id: summary-<l·ªõp>-<dateCode>
      const match = id.match(/^summary-(\d+)-(\d{6})$/);
      if (match) {
        const dateCode = match[2];
        if (isOlderThan8Days(dateCode)) {
          await deleteDoc(doc(db, "tonghop", id));
          console.log(`üóëÔ∏è ƒê√£ xo√° document ${id} v√¨ qu√° 8 ng√†y`);
        }
      }
    }
  }

  alert("‚úÖ ƒê√£ xo√° d·ªØ li·ªáu c≈© th√†nh c√¥ng.");
}



// ‚úÖ G·∫Øn s·ª± ki·ªán cho c√°c n√∫t
//document.getElementById("generateSummaryBtn").addEventListener("click", generateSummaryFromRawData);

document.getElementById("cleanOldBtn").addEventListener("click", cleanOldEntries);

// ===============================
// üìä PH·∫¶N 3A ‚Äî Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™ theo l·ªõp + ng√†y
// ===============================

// ‚úÖ H√†m chu·∫©n h√≥a t√™n h·ªçc sinh
function normalizeName(str) {
  return str.toLowerCase().normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/[^a-z0-9]/g, "")
    .trim();
}

// ‚úÖ H√†m t√≠nh ƒëi·ªÉm x·∫øp h·∫°ng
function calculateScores(entries) {
  let totalScore = 0;
  let totalMax = 0;
  let totalParts = 0;
  let daysDone = 0;

  entries.forEach(entry => {
    totalScore += entry.score;
    totalMax += entry.max;
    totalParts += entry.doneParts;
    daysDone++;
  });

  const scorePercent = totalMax > 0 ? (totalScore / totalMax) * 100 : 0;
  const avgParts = daysDone > 0 ? totalParts / daysDone : 0;

  const hieuQuaScore = scorePercent + totalScore / 2;
  const chamChiScore = totalScore + avgParts * 10 + daysDone * 20;
  const tongHopScore = chamChiScore * 1.2 + hieuQuaScore * 0.8;

  return {
    totalScore,
    totalMax,
    avgParts: avgParts.toFixed(1),
    daysDone,
    hieuQuaScore: Math.round(hieuQuaScore),
    chamChiScore: Math.round(chamChiScore),
    tongHopScore: Math.round(tongHopScore)
  };
}

// ‚úÖ H√†m hi·ªÉn th·ªã b·∫£ng th·ªëng k√™ theo l·ªõp + ng√†y
window.renderStudentSummary = async function () {
  const selectedClass = document.getElementById("classFilter").value;
  const rankingType = document.getElementById("rankingType").value;

  if (!selectedClass) {
    alert("‚ùå Vui l√≤ng ch·ªçn l·ªõp.");
    return;
  }

  const tableBody = document.getElementById("studentTableBody");
  const tableHead = document.getElementById("studentTableHead");
  tableBody.innerHTML = "";
  tableHead.innerHTML = "";
  document.getElementById("rankingTable").style.display = "table";

  // ‚úÖ L·∫•y doc summary chung
  const ref = doc(db, "tonghop", `summary-${selectedClass}-recent`);
  const snap = await getDoc(ref);
  if (!snap.exists()) {
    alert(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t·ªïng h·ª£p cho l·ªõp ${selectedClass}.`);
    return;
  }

  const data = snap.data();
  const allDates = [...data.days].sort((a, b) => b.localeCompare(a)); // m·ªõi -> c≈©
  const studentMap = {};

  for (const date of allDates) {
    const students = data.dayData[date] || {};
    for (const name in students) {
      const key = `${normalizeName(name)}_${selectedClass}`;
      if (!studentMap[key]) studentMap[key] = [];
      studentMap[key].push({ ...students[name], date, name });
    }
  }

  const formatDate = code => `${code.slice(0,2)}-${code.slice(2,4)}-${code.slice(4)}`;
  const keyMap = { tonghop: "tongHopScore", hieuqua: "hieuQuaScore", chamchi: "chamChiScore" };
  const sortKey = keyMap[rankingType] || "tongHopScore";

  const rankingList = [];

  for (const key in studentMap) {
    const [nameKey, className] = key.split("_");
    const entries = studentMap[key];
    const scores = calculateScores(entries);

    const dayCells = allDates.map(date => {
      const entry = entries.find(e => e.date === date);
      if (entry) {
        const durationText = entry.duration ? `${entry.duration} ph√∫t` : "‚Äì";
        return `<td>${entry.score}/${entry.max} ‚Äì ${entry.doneParts} ph·∫ßn ‚Äì ${durationText} ‚Äì ${entry.rating}</td>`;
      } else {
        return `<td>‚Äì</td>`;
      }
    });

    let summaryRating = "‚Äì";
    if (scores.daysDone >= 7) summaryRating = "Tuy·ªát v·ªùi";
    else if (scores.daysDone >= 5) summaryRating = "ChƒÉm";
    else if (scores.daysDone >= 3) summaryRating = "H∆°i l∆∞·ªùi";
    else summaryRating = "L∆∞·ªùi qu√°";

    rankingList.push({
      name: entries[0].name,
      className,
      dayCells,
      summaryRating,
      ...scores
    });
  }

  rankingList.sort((a, b) => b[sortKey] - a[sortKey]);

  const headerRow = `<tr>
    <th>STT</th>
    <th>H·ªç t√™n ‚Äì l·ªõp</th>
    ${allDates.map(d => `<th>${formatDate(d)}</th>`).join("")}
    <th>ƒê√°nh gi√° chung</th>
    <th>Hi·ªáu qu·∫£</th>
    <th>ChƒÉm ch·ªâ</th>
    <th>T·ªïng h·ª£p</th>
  </tr>`;
  tableHead.innerHTML = headerRow;

  rankingList.forEach((student, index) => {
    const row = `<tr>
      <td>${index + 1}</td>
      <td>${student.name} ‚Äì l·ªõp ${student.className}</td>
      ${student.dayCells.join("")}
      <td>${student.summaryRating}</td>
      <td>${student.hieuQuaScore}</td>
      <td>${student.chamChiScore}</td>
      <td><strong>${student.tongHopScore}</strong></td>
    </tr>`;
    tableBody.innerHTML += row;
  });

  if (rankingList.length === 0) {
    tableBody.innerHTML += `<tr><td colspan="${2 + allDates.length + 4}">Kh√¥ng c√≥ d·ªØ li·ªáu cho l·ªõp ƒë√£ ch·ªçn.</td></tr>`;
  }

  await showDailyParticipationFromSummary(selectedClass);

};


// ===============================
// üìã PH·∫¶N 3B ‚Äî B√°o c√°o h·ªçc sinh ƒë√£ l√†m / ch∆∞a l√†m
// ===============================

// ‚úÖ H√†m l·∫•y danh s√°ch h·ªçc sinh t·ª´ Google Sheets
async function fetchStudentListFromSheet() {
  const SHEET_STUDENT_LIST = "https://docs.google.com/spreadsheets/d/1XmiM7fIGqo3eq8QMuhvxj4G3LrGBzsbQHs_gk0KXdTc/gviz/tq?tqx=out:json";
  const res = await fetch(SHEET_STUDENT_LIST);
  const text = await res.text();
  const json = JSON.parse(text.substring(47).slice(0, -2));
  const rows = json.table.rows;

  const studentMap = {};
  rows.forEach(row => {
    const name = row.c[0]?.v?.toString().trim();
    const className = row.c[1]?.v?.toString().trim();
    if (!name || !className) return;

    const normalized = normalizeName(name);
    if (!studentMap[className]) studentMap[className] = [];
    studentMap[className].push({ name, normalized });
  });

  console.log("üìã ƒê√£ l·∫•y danh s√°ch h·ªçc sinh t·ª´ Sheet:", studentMap);
  return studentMap;
}

// ‚úÖ H√†m hi·ªÉn th·ªã b√°o c√°o theo ng√†y
// ‚úÖ ƒê·ªçc t·ª´ summary-{class}-recent v√† hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß: ƒë√£ l√†m / ch∆∞a l√†m / ƒëi·ªÉm k√©m
async function showDailyParticipationFromSummary(className) {
  // L·∫•y doc summary chung
  const ref = doc(db, "tonghop", `summary-${className}-recent`);
  const snap = await getDoc(ref);
  const reportBox = document.getElementById("dailyReportContent");
  if (!snap.exists()) {
    reportBox.innerHTML = "<p>‚ö†Ô∏è Ch∆∞a c√≥ summary chung cho l·ªõp n√†y.</p>";
    return;
  }

  const data = snap.data();
  const allDates = [...(data.days || [])].sort((a, b) => b.localeCompare(a)); // m·ªõi -> c≈©
  const dayData = data.dayData || {};

  // L·∫•y danh s√°ch h·ªçc sinh t·ª´ Sheet
  const studentList = await fetchStudentListFromSheet();
  const classStudents = studentList[className] || [];

  reportBox.innerHTML = "";

  const weakTracker = {}; // t√™n => [{date, type}]
  const formatDM = dc => `${dc.slice(0,2)}/${dc.slice(2,4)}`;

  // üìÖ L·∫∑p qua t·ª´ng ng√†y ƒë·ªÉ hi·ªÉn th·ªã b√°o c√°o chi ti·∫øt
  for (const dateCode of allDates) {
    const students = dayData[dateCode] || {};
    const doneSet = new Set();
    const needImprove = [];
    const notDoneList = [];

    for (const name in students) {
      doneSet.add(normalizeName(name));
      const rating = (students[name].rating || "").trim();
      if (rating === "‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán") {
        needImprove.push(name);
      }
    }

    for (const s of classStudents) {
      if (!doneSet.has(normalizeName(s.name))) {
        notDoneList.push(s.name);
      }
    }

    // Ghi l·∫°i tr·∫°ng th√°i y·∫øu cho t·ªïng h·ª£p
    const allWeak = [
      ...notDoneList.map(n => ({ name: n, type: "ch∆∞a l√†m b√†i", date: dateCode })),
      ...needImprove.map(n => ({ name: n, type: "ƒëi·ªÉm k√©m", date: dateCode }))
    ];
    for (const item of allWeak) {
      if (!weakTracker[item.name]) weakTracker[item.name] = [];
      weakTracker[item.name].push({ date: item.date, type: item.type });
    }

    // ‚úÖ Hi·ªÉn th·ªã b√°o c√°o t·ª´ng ng√†y
    const formattedDate = formatDM(dateCode);
    const section = document.createElement("div");
    section.style.marginTop = "20px";
    section.innerHTML = `
      <h4>üìÖ Ng√†y ${formattedDate}</h4>

      <p>‚úÖ ƒê√£ l√†m b√†i (${classStudents.filter(s => doneSet.has(normalizeName(s.name))).length}): 
        <span id="done-${dateCode}" data-class="${className}" data-date="${formattedDate}" data-type="done">
          ${classStudents.filter(s => doneSet.has(normalizeName(s.name))).map(s => s.name).join(", ") || "Kh√¥ng c√≥"}
        </span>
        <button onclick="copyToClipboard('done-${dateCode}')">üìã Sao ch√©p</button>
      </p>

      <p>‚ùå Ch∆∞a l√†m b√†i (${notDoneList.length}): 
        <span id="notdone-${dateCode}" data-class="${className}" data-date="${formattedDate}" data-type="notdone">
          ${notDoneList.join(", ") || "Kh√¥ng c√≥"}
        </span>
        <button onclick="copyToClipboard('notdone-${dateCode}')">üìã Sao ch√©p</button>
      </p>

      <p>‚ö†Ô∏è ƒêi·ªÉm k√©m (${needImprove.length}): 
        <span id="needimprove-${dateCode}" data-class="${className}" data-date="${formattedDate}" data-type="needimprove">
          ${needImprove.join(", ") || "Kh√¥ng c√≥"}
        </span>
        <button onclick="copyToClipboard('needimprove-${dateCode}')">üìã Sao ch√©p</button>
      </p>

      <hr>
    `;
    reportBox.appendChild(section);
  }

  // üîî T·ªïng h·ª£p danh s√°ch ƒë·∫∑c bi·ªát
  const needAttention = [];   // >= 3 ng√†y y·∫øu
  const notDoneTwoDays = [];  // h√¥m nay + h√¥m qua ƒë·ªÅu ch∆∞a l√†m b√†i

  const todayCode = allDates[0];
  const yesterdayCode = allDates[1] || null;

  for (const name in weakTracker) {
    const history = weakTracker[name];

    // Gom nh√≥m theo type
    const grouped = {};
    for (const h of history) {
      if (!grouped[h.type]) grouped[h.type] = [];
      grouped[h.type].push(h.date);
    }

    const parts = [];
    for (const type in grouped) {
      const dates = grouped[type]
        .sort((a,b)=>b.localeCompare(a))
        .map(formatDM);
      parts.push(`${type} (${dates.join(", ")})`);
    }
    const detail = parts.join(" - ");

    // ‚úÖ Danh s√°ch 1: h·ªçc sinh c√≥ >= 3 ng√†y y·∫øu
    if (history.length >= 3) {
      needAttention.push({
        name,
        count: history.length,
        detail
      });
    }

    // ‚úÖ Danh s√°ch 2: h√¥m nay v√† h√¥m qua ƒë·ªÅu "ch∆∞a l√†m b√†i"
    if (todayCode && yesterdayCode) {
      const todayWeak = history.find(h => h.date === todayCode && h.type === "ch∆∞a l√†m b√†i");
      const yesterdayWeak = history.find(h => h.date === yesterdayCode && h.type === "ch∆∞a l√†m b√†i");
      if (todayWeak && yesterdayWeak) {
        notDoneTwoDays.push(name);
      }
    }
  }

  // S·∫Øp x·∫øp danh s√°ch c·∫ßn quan t√¢m theo s·ªë ng√†y y·∫øu gi·∫£m d·∫ßn
  needAttention.sort((a, b) => b.count - a.count);

  // Hi·ªÉn th·ªã danh s√°ch 1: H·ªçc sinh c·∫ßn quan t√¢m (chia block 10 b·∫°n)
  if (needAttention.length > 0) {
    for (let i = 0; i < needAttention.length; i += 10) {
      const chunk = needAttention.slice(i, i + 10);
      const lines = chunk.map(item => 
        `‚Ä¢ ${item.name} ${item.count} ng√†y y·∫øu: ${item.detail}`
      );
      const section = document.createElement("div");
      section.innerHTML = `
        <h4>üîî H·ªçc sinh c·∫ßn quan t√¢m (${chunk.length}/${needAttention.length})</h4>
        <p id="need-attention-${i}" data-class="${className}" data-type="needAttention" data-raw="${lines.join("\n")}">
          ${lines.join("<br>")}
        </p>
        <button onclick="copyToClipboard('need-attention-${i}')">üìã Sao ch√©p</button>
        <hr>
      `;
      reportBox.prepend(section);
    }
  }

  // Hi·ªÉn th·ªã danh s√°ch 2: H·ªçc sinh ch∆∞a l√†m b√†i qua nay (ch·ªâ t√™n, 1 d√≤ng)
  if (notDoneTwoDays.length > 0) {
    const section2 = document.createElement("div");
    section2.innerHTML = `
      <h4>‚ùå H·ªçc sinh ch∆∞a l√†m b√†i qua nay (${notDoneTwoDays.length})</h4>
      <p id="notdone-twodays" data-class="${className}" data-type="notdone2days" data-raw="${notDoneTwoDays.join(", ")}">
        ${notDoneTwoDays.join(", ")}
      </p>
      <button onclick="copyToClipboard('notdone-twodays')">üìã Sao ch√©p</button>
      <hr>
    `;
    reportBox.prepend(section2);
  }

  reportBox.scrollIntoView({ behavior: "smooth" });
  console.log("üìã ƒê√£ hi·ªÉn th·ªã b√°o c√°o theo summary chung.");
}





// ‚úÖ H√†m sao ch√©p danh s√°ch (b·∫£n m·ªõi)
window.copyToClipboard = function(id) {
  const el = document.getElementById(id);
  if (!el) return;

  const rawNames = el.getAttribute("data-raw") || el.textContent.trim();

  const className = el.getAttribute("data-class") || "";
  const date = el.getAttribute("data-date") || "";
  const type = el.getAttribute("data-type");

  let formatted = "";

  if (type === "done") {
    formatted = `Danh s√°ch h·ªçc sinh l·ªõp ${className} ƒë√£ l√†m b√†i ng√†y ${date}: ${rawNames}`;
  } else if (type === "notdone") {
    formatted = `Danh s√°ch h·ªçc sinh l·ªõp ${className} ch∆∞a l√†m b√†i ng√†y ${date}: ${rawNames}`;
  } else if (type === "needimprove") {
    formatted = `Danh s√°ch h·ªçc sinh l·ªõp ${className} c·∫ßn c·∫£i thi·ªán ng√†y ${date}: ${rawNames}`;
  } else if (type === "needAttention") {
    formatted = `üîî H·ªçc sinh l·ªõp ${className} c·∫ßn quan t√¢m:\n${rawNames}`;
  } else if (type === "notdone2days") {
    formatted = `‚ùå H·ªçc sinh l·ªõp ${className} ch∆∞a l√†m b√†i qua nay: ${rawNames}`;
  } else {
    formatted = rawNames;
  }

  navigator.clipboard.writeText(formatted);
  console.log(`üìã ƒê√£ sao ch√©p: ${formatted}`);
};


document.addEventListener("DOMContentLoaded", () => {
  // renderDateCheckboxes(generateRecentDateCodes());
});
