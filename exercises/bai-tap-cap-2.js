// ‚úÖ ƒêi·ªÅu h∆∞·ªõng c√°c n√∫t
function goToPractice() {
  window.location.href = "bai-tap-tung-dang.html";
}
function goToTest() {
  window.location.href = "bai-kiem-tra.html";
}
function goToTheory() {
  window.location.href = "ly-thuyet.html";
}

// ‚úÖ Danh s√°ch d·∫°ng b√†i
const types = [
  "pronunciation", "verb", "article", "preposition", "pronoun",
  "connector", "rewrite", "plural", "wordform", "vocabulary",
  "reading", "kiemtra"
];

// ‚úÖ Nh√£n ti·∫øng Vi·ªát cho t·ª´ng d·∫°ng b√†i
const typeLabels = {
  pronunciation: "Ph√°t √¢m",
  verb: "ƒê·ªông t·ª´",
  article: "M·∫°o t·ª´",
  preposition: "Gi·ªõi t·ª´",
  pronoun: "ƒê·∫°i t·ª´",
  connector: "Li√™n t·ª´",
  rewrite: "Vi·∫øt l·∫°i c√¢u",
  plural: "S·ªë nhi·ªÅu",
  wordform: "Bi·∫øn ƒë·ªïi t·ª´",
  vocabulary: "T·ª´ v·ª±ng",
  reading: "ƒê·ªçc hi·ªÉu",
  kiemtra: "Ki·ªÉm tra"
};

// ‚úÖ H√†m l·∫•y ƒëi·ªÉm t·ª´ localStorage
function getScore(type) {
  const key = `score_${type}_grade8`;
  const data = JSON.parse(localStorage.getItem(key) || "{}");
  return {
    correct: data.correct || 0,
    total: data.total || 0
  };
}

// ‚úÖ Hi·ªÉn th·ªã b·∫£ng ƒëi·ªÉm chi ti·∫øt
function renderScoreTable() {
  const tbody = document.querySelector("#scoreTable tbody");
  if (!tbody) return;

  tbody.innerHTML = "";

  types.forEach(type => {
    const { correct, total } = getScore(type);
    const percent = total ? Math.round((correct / total) * 100) : 0;
    const label = typeLabels[type] || type;

    const row = document.createElement("tr");
    row.innerHTML = `
      <td><img src="https://upload.wikimedia.org/wikipedia/commons/5/53/Pok√©_Ball_icon.svg" class="pokeball">${label}</td>
      <td>${correct}</td>
      <td>${total}</td>
      <td>${percent}%</td>
    `;
    tbody.appendChild(row);
  });
}

// ‚úÖ T·∫°o m√£ k·∫øt qu·∫£ t√≥m t·∫Øt
function generateResultCode() {
  const studentName = localStorage.getItem("trainerName") || "Kh√¥ng t√™n";
  const studentClass = localStorage.getItem("trainerClass") || "Ch∆∞a c√≥ l·ªõp";

  const resultParts = types
    .map(type => {
      const { correct, total } = getScore(type);
      if (total > 0) {
        const label = typeLabels[type] || type;
        return `${label}: ${correct}/${total}`;
      }
      return null;
    })
    .filter(Boolean)
    .join(" - ");

  return `${studentName}-${studentClass} - ${resultParts}`;
}

// ‚úÖ Hi·ªÉn th·ªã m√£ k·∫øt qu·∫£ v√† n√∫t sao ch√©p
function renderResultCode() {
  const resultSection = document.getElementById("resultSection");
  if (!resultSection) return;

  const resultCode = generateResultCode();
  const now = new Date();
  const dateStr = now.toLocaleDateString("vi-VN");
  const timeStr = now.toLocaleTimeString("vi-VN");

  const resultCodeEl = document.createElement("p");
  resultCodeEl.innerHTML = `
    <strong>M√£ k·∫øt qu·∫£:</strong> ${resultCode}
    <br><em>Th·ªùi gian t·∫°o: ${dateStr} ${timeStr}</em>
  `;

  const copyBtn = document.createElement("button");
  copyBtn.textContent = "üìã Sao ch√©p m√£ k·∫øt qu·∫£";
  copyBtn.className = "copy-btn";
  copyBtn.onclick = () => {
    navigator.clipboard.writeText(resultCode).then(() => {
      alert("‚úÖ ƒê√£ sao ch√©p m√£ k·∫øt qu·∫£!");
    });
  };

  resultSection.appendChild(resultCodeEl);
  resultSection.appendChild(copyBtn);
}

// ‚úÖ Kh·ªüi ch·∫°y khi trang t·∫£i xong
document.addEventListener("DOMContentLoaded", () => {
  renderScoreTable();
  renderResultCode();
});
