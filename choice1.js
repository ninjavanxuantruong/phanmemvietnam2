// ‚úÖ choice1.js ‚Äî phi√™n b·∫£n m·ªõi (m·ªói ng√†y ch·ªâ 1 b√†i)

const todayISO = new Date().toISOString().split("T")[0];
const className = localStorage.getItem("trainerClass")?.trim().toLowerCase();
const VOCAB_URL = "https://docs.google.com/spreadsheets/d/1KaYYyvkjFxVVobRHNs9tDxW7S79-c5Q4mWEKch6oqks/gviz/tq?tqx=out:json";

if (!className) {
  document.getElementById("lessonList").innerHTML = "<p>‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp ƒë√£ ch·ªçn.</p>";
  document.getElementById("scheduleTable").style.display = "none";
  document.getElementById("statusMessage").textContent = "Vui l√≤ng ch·ªçn l·ªõp tr∆∞·ªõc.";
  throw new Error("Kh√¥ng c√≥ trainerClass");
}

const docRef = window.doc(window.db, "lich", className);
window.getDoc(docRef).then(snapshot => {
  if (!snapshot.exists()) {
    document.getElementById("lessonList").innerHTML = "<p>‚ùå Kh√¥ng c√≥ l·ªãch h·ªçc n√†o cho l·ªõp n√†y.</p>";
    return;
  }

  const data = snapshot.data();
  const todayLesson = data[todayISO] || null;

  // ‚úÖ Hi·ªÉn th·ªã b√†i h·ªçc h√¥m nay
  const container = document.getElementById("lessonList");
  container.innerHTML = "";
  if (!todayLesson) {
    container.innerHTML = "<p>üì≠ Kh√¥ng c√≥ b√†i h·ªçc n√†o h√¥m nay.</p>";
  } else {
    const item = todayLesson; // object duy nh·∫•t
    const label =
      item.type === "new" ? "B√†i m·ªõi" :
      item.type === "related" ? `Li√™n quan ƒë·∫øn ${item.relatedTo}` :
      item.type === "review" ? `√în t·∫≠p c·ªßa ${item.relatedTo}` :
      item.type === "old" ? "B√†i c≈©" : item.type;

    const div = document.createElement("div");
    div.innerHTML = `
      <label>
        <input type="checkbox" value="${normalizeUnit(item.code)}" data-title="${item.title}" />
        ${item.title} (${label})
      </label>
    `;
    container.appendChild(div);

    // L∆∞u v√†o localStorage ƒë·ªÉ choice.js ƒë·ªçc ƒë∆∞·ª£c
    localStorage.setItem("todayLesson", JSON.stringify(item));
  }

  // ‚úÖ Hi·ªÉn th·ªã l·ªãch t·ª´ h√¥m nay tr·ªü ƒëi
  const tableBody = document.querySelector("#scheduleTable tbody");
  tableBody.innerHTML = "";
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  const yesterdayISO = yesterday.toISOString().split("T")[0];

  const entries = Object.entries(data)
    .filter(([date]) => date >= yesterdayISO)
    .sort(([a], [b]) => new Date(a) - new Date(b));

  for (let [dateStr, lesson] of entries) {
    const [yyyy, mm, dd] = dateStr.split("-");
    const formattedDate = `${dd}/${mm}/${yyyy}`;

    const label =
      lesson.type === "new" ? "B√†i m·ªõi ‚Äì Ph√π h·ª£p" :
      lesson.type === "review" ? "√în t·∫≠p ‚Äì N√™n h·ªçc l·∫°i" :
      lesson.type === "related" ? "Li√™n quan ‚Äì N√™n h·ªçc" :
      lesson.type === "old" ? "B√†i c≈© ‚Äì N√™n h·ªçc l·∫°i" :
      lesson.type;

    const related = lesson.relatedTo ? ` (li√™n quan ${lesson.relatedTo})` : "";
    const combined = `${lesson.title} ‚Äì ${label}${related}`;

    const code = normalizeUnit(lesson.code);
    const title = lesson.title;

    const button = document.createElement("button");
    button.textContent = "H·ªçc b√†i";
    button.style.padding = "6px 12px";
    button.style.borderRadius = "6px";
    button.style.border = "none";
    button.style.background = "#4caf50";
    button.style.color = "white";
    button.style.cursor = "pointer";
    button.onclick = () => {
      localStorage.setItem("selectedCodes", JSON.stringify([code]));
      localStorage.setItem("selectedTitles", JSON.stringify([title]));
      localStorage.setItem("selectedLesson", title);
      fetchVocabularyFromSelectedCodes([code]);
    };

    const noteCell = document.createElement("td");
    noteCell.appendChild(button);

    const row = document.createElement("tr");
    row.innerHTML = `
      <td>${formattedDate}</td>
      <td>${combined}</td>
    `;
    row.appendChild(noteCell);

    if (dateStr === todayISO) row.classList.add("today-row");

    tableBody.appendChild(row);
  }

  document.getElementById("btnLearnSuggested").disabled = false;
}).catch(err => {
  console.error("‚ùå L·ªói khi l·∫•y l·ªãch h·ªçc:", err);
  document.getElementById("lessonList").innerHTML = "<p>‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu.</p>";
});

// ‚úÖ G·∫Øn s·ª± ki·ªán n√∫t h·ªçc b√†i ƒë·ªÅ xu·∫•t
document.getElementById("btnLearnSuggested").addEventListener("click", () => {
  const checkbox = document.querySelector("#lessonList input[type='checkbox']");
  if (!checkbox || !checkbox.checked) {
    alert("B·∫°n ch∆∞a ch·ªçn b√†i n√†o.");
    return;
  }

  const code = normalizeUnit(checkbox.value);
  const title = checkbox.dataset.title;

  localStorage.setItem("selectedCodes", JSON.stringify([code]));
  localStorage.setItem("selectedTitles", JSON.stringify([title]));
  localStorage.setItem("selectedLesson", title);

  fetchVocabularyFromSelectedCodes([code]);
});

// ‚úÖ L·∫•y t·ª´ v·ª±ng t·ª´ Google Sheets theo m√£ b√†i
async function fetchVocabularyFromSelectedCodes(unitCodes) {
  try {
    const res = await fetch(VOCAB_URL);
    const text = await res.text();
    const json = JSON.parse(text.substring(47).slice(0, -2));
    const rows = json.table.rows;

    let wordBank = [];

    rows.forEach(row => {
      const unitRaw = row.c[1]?.v?.toString().trim();
      const word = row.c[2]?.v?.toString().trim();
      const code = extractCodeFromTitle(unitRaw);

      if (unitCodes.includes(code)) {
        wordBank.push(word);
      }
    });

    wordBank = shuffleArray(wordBank);

    localStorage.setItem("wordBank", JSON.stringify(wordBank));
    localStorage.setItem("victoryTotalWords", wordBank.length);
    console.log("üì¶ T·ª´ v·ª±ng ƒë√£ l·∫•y:", wordBank);

    window.location.href = "exercise.html";
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y t·ª´ v·ª±ng:", err);
    alert("Kh√¥ng th·ªÉ l·∫•y t·ª´ v·ª±ng. Vui l√≤ng th·ª≠ l·∫°i sau.");
  }
}

// ‚úÖ Chu·∫©n h√≥a m√£ b√†i
function normalizeUnit(str) {
  if (!str || typeof str !== "string") return "";
  return str.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/[^0-9]/g, "").trim();
}

function extractCodeFromTitle(title) {
  if (!title || typeof title !== "string") return "";
  const parts = title.trim().split(/[-\s.]+/);
  if (parts.length >= 3 && /^\d+$/.test(parts[0]) && /^\d+$/.test(parts[1]) && /^\d+$/.test(parts[2])) {
    return parts[0] + parts[1] + parts[2];
  }
  return "";
}

// ‚úÖ X√°o tr·ªôn t·ª´ v·ª±ng
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}
