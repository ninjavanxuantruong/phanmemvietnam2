import { initializeApp, getApp } from "https://www.gstatic.com/firebasejs/10.5.0/firebase-app.js";
import { getFirestore, doc, getDoc } from "https://www.gstatic.com/firebasejs/10.5.0/firebase-firestore.js";

const firebaseConfig = {
  apiKey: "AIzaSyCCVdzWiiFvcWiHVJN-x33YKarsjyziS8E",
  authDomain: "pokemon-capture-10d03.firebaseapp.com",
  projectId: "pokemon-capture-10d03",
  storageBucket: "pokemon-capture-10d03.firebasestorage.app",
  messagingSenderId: "1068125543917",
  appId: "1:1068125543917:web:57de4365ee56729ea8dbe4"
};
let app; try { app = initializeApp(firebaseConfig); } catch { app = getApp(); }
const db = getFirestore(app);

const infoBox = document.getElementById("infoBox");
const monthsBox = document.getElementById("monthsBox");

// üëâ L·∫•y trainerName + trainerClass t·ª´ localStorage
const trainerName = (localStorage.getItem("trainerName") || "").toLowerCase().trim();
const trainerClass = localStorage.getItem("trainerClass") || "";
const docId = `${trainerName}-${trainerClass}`;

async function loadParentData() {
  if (!trainerName || !trainerClass) {
    infoBox.innerHTML = "<p>‚ùå Ch∆∞a c√≥ th√¥ng tin h·ªçc sinh trong localStorage</p>";
    return;
  }

  try {
    const ref = doc(db, "parents", docId);
    const snap = await getDoc(ref);
    if (!snap.exists()) {
      infoBox.innerHTML = "<p>‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ªçc sinh tr√™n h·ªá th·ªëng</p>";
      return;
    }

    const data = snap.data();

    // Th√¥ng tin chung
    const realName = data.realName || "";
    const nickname = data.nickname || trainerName;
    const parentName = data.parentName || "";

    // T√≠nh t·ªïng ti·ªÅn ch∆∞a n·ªôp + li·ªát k√™ th√°ng/nƒÉm ch∆∞a n·ªôp
    let unpaidList = [];
    Object.entries(data).forEach(([key, val]) => {
      if (key.match(/^\d{1,2}-\d{4}$/)) {
        if (!val.paid) {
          unpaidList.push({
            monthYear: key,
            money: val.totalMoney || 0
          });
        }
      }
    });

    let unpaidText = "Kh√¥ng c√≤n n·ª£ h·ªçc ph√≠ üéâ";
    if (unpaidList.length > 0) {
      unpaidText = unpaidList.map(u =>
        `Th√°ng ${u.monthYear}: ${u.money.toLocaleString("vi-VN")} VND`
      ).join("<br>");
    }

    // Render ph·∫ßn th√¥ng tin ri√™ng
    infoBox.innerHTML = `
      <h2>Th√¥ng tin h·ªçc sinh</h2>
      <p><b>T√™n h·ªçc sinh:</b> ${realName}</p>
      <p><b>Nickname:</b> ${nickname}</p>
      <p><b>Ph·ª• huynh:</b> ${parentName}</p>
      <p><b>ƒê√°nh gi√°:</b> (s·∫Ω b·ªï sung sau)</p>
      <p class="summary">üí∞ Ti·ªÅn ch∆∞a n·ªôp:<br>${unpaidText}</p>
    `;

    // Render ph·∫ßn chi ti·∫øt t·ª´ng th√°ng
    monthsBox.innerHTML = "";
    Object.entries(data).forEach(([key, val]) => {
      if (!key.match(/^\d{1,2}-\d{4}$/)) return; // ch·ªâ l·∫•y key d·∫°ng "7-2025"

      const monthDiv = document.createElement("div");
      monthDiv.className = "month";

      const header = document.createElement("div");
      header.className = "month-header";
      header.textContent = `Th√°ng ${key}`;
      header.onclick = () => {
        body.style.display = body.style.display === "none" ? "block" : "none";
      };

      const body = document.createElement("div");
      body.className = "month-body";

      // Helper: format danh s√°ch ng√†y
      function formatDays(list) {
        if (!list || list.length === 0) return "(kh√¥ng c√≥)";
        return list.map(d => d.split("-").reverse().join("/")).join(", ");
      }

      body.innerHTML = `
        <p><b>Bu·ªïi h·ªçc:</b> ${val.totalX || 0} <br><i>Ng√†y:</i> ${formatDays(val.daysISO?.x)}</p>
        <p><b>Bu·ªïi h·ªçc 1 n·ª≠a:</b> ${val.totalHalf || 0} <br><i>Ng√†y:</i> ${formatDays(val.daysISO?.half)}</p>
        <p><b>Ngh·ªâ c√≥ ph√©p (CP):</b> ${val.totalCP || 0} <br><i>Ng√†y:</i> ${formatDays(val.daysISO?.cp)}</p>
        <p><b>Ngh·ªâ kh√¥ng ph√©p (KP):</b> ${val.totalKP || 0} <br><i>Ng√†y:</i> ${formatDays(val.daysISO?.kp)}</p>
        <p><b>Kh√°c:</b> ${val.totalOther || 0} <br><i>Ng√†y:</i> ${formatDays(val.daysISO?.other)}</p>
        <hr>
        <p><b>T·ªïng ti·ªÅn:</b> ${(val.totalMoney || 0).toLocaleString("vi-VN")} VND</p>
        <p><b>Tr·∫°ng th√°i:</b> <span class="${val.paid ? "paid-true" : "paid-false"}">${val.paid ? "ƒê√£ n·ªôp" : "Ch∆∞a n·ªôp"}</span></p>
        <p><b>Ng√†y n·ªôp:</b> ${val.paidDate || "-"}</p>
      `;

      monthDiv.appendChild(header);
      monthDiv.appendChild(body);
      monthsBox.appendChild(monthDiv);
    });

  } catch (e) {
    console.error(e);
    infoBox.innerHTML = "<p>‚ùå L·ªói t·∫£i d·ªØ li·ªáu: " + e.message + "</p>";
  }
}

loadParentData();
